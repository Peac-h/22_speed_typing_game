{"mappings":"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","sources":["src/js/config.js","src/js/helpers.js","src/js/script.js"],"sourcesContent":["export const API_URLS = [\n  {\n    url: \"https://strangerthings-quotes.vercel.app/api/quotes\",\n    tvShow: \"Stranger Things\",\n    quote: (data) => data.at(0).quote,\n    author: (data) => data.at(0).author,\n  },\n  {\n    url: \"https://api.breakingbadquotes.xyz/v1/quotes\",\n    tvShow: \"Breaking Bad\",\n    quote: (data) => data.at(0).quote,\n    author: (data) => data.at(0).author,\n  },\n  {\n    url: \"https://lucifer-quotes.vercel.app/api/quotes\",\n    tvShow: \"Lucifer\",\n    quote: (data) => data.at(0).quote,\n    author: (data) => data.at(0).author,\n  },\n  {\n    url: \"https://api.gameofthronesquotes.xyz/v1/random\",\n    tvShow: \"GOT\",\n    quote: (data) => data.sentence,\n    author: (data) => data.character.name,\n  },\n];\n\nexport const TIMEOUT_SEC = 10;\n","import { TIMEOUT_SEC } from \"./config.js\";\nimport { API_URLS } from \"./config.js\";\n\nconst timeout = function (sec) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${sec} seconds`));\n    }, sec * 1000);\n  });\n};\n\nexport const getJSON = function (url) {\n  return Promise.race([fetch(url), timeout(TIMEOUT_SEC)])\n    .then((response) => {\n      if (!response.ok) throw new Error(`${response.statusText}`);\n\n      return response.json();\n    })\n    .catch((error) => {\n      throw error;\n    });\n};\n\nexport function getURL() {\n  return API_URLS[Math.floor(Math.random() * API_URLS.length)].url;\n}\n","import { API_URLS } from \"./config.js\";\nimport { getURL } from \"./helpers.js\";\nimport { getJSON } from \"./helpers.js\";\n\n// DOM Selectors\nconst timerEl = document.getElementById(\"timerEl\");\nconst quoteField = document.getElementById(\"quoteEl\");\nconst typingField = document.getElementById(\"typingAreaEl\");\nconst highCharEl = document.getElementById(\"charactersEl\");\nconst highSecEl = document.getElementById(\"secondsEl\");\nconst quoteAuthorEl = document.getElementById(\"quoteAuthor\");\n\n// Code Variables\nlet timer, time, chars, seconds;\n\n// Begin The Game\nwindow.addEventListener(\"load\", (event) => getData(getURL()));\n\n// API Data Handling Function\nconst getData = (url) => {\n  getJSON(url)\n    .then((data) => {\n      const index = API_URLS.findIndex((obj) => obj.url === url);\n      const tvShow = API_URLS[index].tvShow;\n      const author = API_URLS[index].author(data);\n      const quote = API_URLS[index].quote(data);\n\n      renderData(quote, author, tvShow);\n    })\n    .catch((error) => {\n      console.log(error);\n      quoteField.innerText = `Oops, we have an error: ${error.message}.`;\n    });\n};\n\n// Rendering Data\nconst renderData = (quote, author, tvShow) => {\n  quoteField.innerText = \"\";\n\n  // create individual span for quote's each character\n  quote.split(\"\").forEach((character) => {\n    // handling some syntax coming from API that doen't match keyboard values\n    if (character === `’`) character = `'`;\n    if (character === `“` || character === `”`) character = `\"`;\n    if (character === \"…\" || character === \"...\") character = \".\";\n\n    // render the quote\n    const markup = `<span>${character}</span>`;\n    quoteField.insertAdjacentHTML(\"beforeend\", markup);\n  });\n\n  // render the TV show\n  quoteAuthorEl.innerText = `${author}, '${tvShow}'`;\n\n  typingField.value = \"\";\n\n  // if there is a timer, cleat it and start over\n  if (timer) clearInterval(timer);\n  timer = startTimer();\n};\n\n// Handle Typing\ntypingField.addEventListener(\"input\", () => {\n  // create arrays for all quote spans & typed characters\n  const spanElements = document.querySelectorAll(\"#quoteEl span\");\n  const typedCharacters = typingField.value.split(\"\");\n\n  // to end round successfully correct must stay true at the end of the forEach block\n  let correct = true;\n\n  // loop through rendered spans and typed characters\n  spanElements.forEach((span, index) => {\n    const character = typedCharacters[index];\n    // if there is the same indexed character, compare them\n    if (character) {\n      // if it matches, add style\n      if (character === span.innerText) {\n        span.classList.add(\"correctStyle\");\n        span.classList.remove(\"incorrectStyle\");\n      }\n      // if it does not, add another style\n      else {\n        span.classList.remove(\"correctStyle\");\n        span.classList.add(\"incorrectStyle\");\n        correct = false;\n      }\n    }\n    // if there is not the same indexed character, remove any style from span\n    else {\n      span.classList.remove(\"correctStyle\");\n      span.classList.remove(\"incorrectStyle\");\n      correct = false;\n    }\n  });\n\n  // only ends up true if both array lengths are equal and there are not incorrect characters in typing field\n  if (correct) {\n    // seconds is undefined in the beginning, so first scores are highscores,\n    // and after that variables are only updating if the time has improved\n    if (seconds === undefined || seconds > time) {\n      seconds = time - 1;\n      chars = typedCharacters.length;\n    }\n\n    highSecEl.innerText = seconds;\n    highCharEl.innerText = chars;\n\n    getData(getURL());\n  }\n});\n\n// Timer\nconst startTimer = () => {\n  time = 0;\n  // calculate minutes and seconds and render them in timer element\n  function tick() {\n    const min = String(Math.trunc(time / 60)).padStart(2, 0);\n    const sec = String(time % 60).padStart(2, 0);\n    timerEl.innerText = `${min}:${sec}`;\n    // add one to the time\n    time++;\n  }\n\n  tick();\n  const timer = setInterval(tick, 1000);\n\n  // return the tick to handle it outside the function\n  return timer;\n};\n"],"names":["$ef19e442e0cefa4b$export$bfe19bc25132bb7c","url","tvShow","quote","data","at","author","sentence","character","name","$305e87f8b1fd70ca$export$d047a7c56db64af4","Promise","race","fetch","sec","_","reject","setTimeout","Error","then","response","ok","statusText","json","catch","error","$305e87f8b1fd70ca$export$152462a4e1ffe278","Math","floor","random","length","$1ee2b6306238ec66$var$timerEl","document","getElementById","$1ee2b6306238ec66$var$quoteField","$1ee2b6306238ec66$var$typingField","$1ee2b6306238ec66$var$highCharEl","$1ee2b6306238ec66$var$highSecEl","$1ee2b6306238ec66$var$quoteAuthorEl","$1ee2b6306238ec66$var$timer","$1ee2b6306238ec66$var$time","$1ee2b6306238ec66$var$chars","$1ee2b6306238ec66$var$seconds","window","addEventListener","event","$1ee2b6306238ec66$var$getData","index","findIndex","obj","$1ee2b6306238ec66$var$renderData","console","log","innerText","message","split","forEach","markup","insertAdjacentHTML","value","clearInterval","$1ee2b6306238ec66$var$startTimer","spanElements","querySelectorAll","typedCharacters","correct","span","classList","add","remove","undefined","tick","min","String","trunc","padStart","setInterval"],"version":3,"file":"index.1eb6671d.js.map"}